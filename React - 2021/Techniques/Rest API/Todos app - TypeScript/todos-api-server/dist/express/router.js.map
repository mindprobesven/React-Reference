{"version":3,"file":"router.js","sourceRoot":"","sources":["../../src/express/router.ts"],"names":[],"mappings":";;;;;AAIA,gDAAwB;AACxB,sDAA8B;AAC9B,kEAAoC;AAEpC,6CAA0D;AAE1D,+EAAuD;AAEvD,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AACpC,MAAqB,aAAa;IAKhC;QACE,IAAI,CAAC,OAAO,GAAG,iBAAO,EAAE,CAAC;IAC3B,CAAC;IAEO,SAAS;QAEf,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAO,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;QAG/E,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAa,CAAC,CAAC;QAGhC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACjC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACvB,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,MAAM;QACZ,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI;gBACF,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,qBAAY,EAAE,GAAG,EAAE;oBACrC,OAAO,CAAC,GAAG,CAAC,GAAG,iBAAQ,gCAAgC,qBAAY,GAAG,CAAC,CAAC;oBACxE,OAAO,CAAC,IAAI,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;aACJ;YAAC,OAAO,KAAK,EAAE;gBACd,IAAI,KAAK,YAAY,KAAK,EAAE;oBAC1B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBACxB,MAAM,CAAC,KAAK,CAAC,CAAC;iBACf;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK;QAChB,OAAO,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,EAAE;YACtC,IAAI,OAAO,IAAI,CAAC,MAAM,KAAK,WAAW,EAAE;gBACtC,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC;gBAClC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;gBAExB,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;aACxF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAjDD,gCAiDC","sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport path from 'path';\nimport express from 'express';\nimport favicon from 'serve-favicon';\n\nimport { ENV_TYPE, EXPRESS_PORT } from '../config/config';\n\nimport requestLogger from './middleware/requestLogger';\n\nconsole.log('Loaded router module');\nexport default class ExpressServer {\n  private static server: ExpressServer;\n\n  private express;\n\n  private constructor() {\n    this.express = express();\n  }\n\n  private configure() {\n    // Middleware to handle favicon.ico requests\n    this.express.use(favicon(path.join(__dirname, '../../public', 'favicon.ico')));\n\n    // Middleware for requests logging\n    this.express.use(requestLogger);\n\n    // curl -X GET -H \"Accept: application/json\" http://127.0.0.1:5000\n    this.express.get('/', (req, res) => {\n      console.log('Request');\n      res.sendStatus(200);\n    });\n  }\n\n  private listen(): Promise<boolean | Error> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.express.listen(EXPRESS_PORT, () => {\n          console.log(`${ENV_TYPE} server is listening on port ${EXPRESS_PORT}!`);\n          resolve(true);\n        });\n      } catch (error) {\n        if (error instanceof Error) {\n          console.log(error.name);\n          reject(error);\n        }\n      }\n    });\n  }\n\n  static async start(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      if (typeof this.server === 'undefined') {\n        this.server = new ExpressServer();\n        this.server.configure();\n\n        this.server.listen().then(() => resolve(true)).catch((error: Error) => resolve(false));\n      }\n    });\n  }\n}\n"]}