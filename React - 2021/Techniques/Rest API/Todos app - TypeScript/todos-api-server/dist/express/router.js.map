{"version":3,"file":"router.js","sourceRoot":"","sources":["../../src/express/router.ts"],"names":[],"mappings":";;;;;AAIA,sDAA8B;AAE9B,6CAA0D;AAE1D,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AAEpC,MAAM,GAAG,GAAG,iBAAO,EAAE,CAAC;AAiBtB,MAAqB,aAAa;IAKhC;QACE,IAAI,CAAC,OAAO,GAAG,iBAAO,EAAE,CAAC;IAC3B,CAAC;IAEO,SAAS;QACf,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACjC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACvB,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,KAAK;QACV,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;YACnC,IAAI,OAAO,IAAI,CAAC,MAAM,KAAK,WAAW,EAAE;gBACtC,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC;gBAClC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;gBAExB,IAAI;oBACF,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,qBAAY,EAAE,GAAG,EAAE;wBAC5C,OAAO,CAAC,GAAG,CAAC,GAAG,iBAAQ,gCAAgC,qBAAY,GAAG,CAAC,CAAC;wBACxE,OAAO,EAAE,CAAC;oBACZ,CAAC,CAAC,CAAC;iBACJ;gBAAC,OAAO,KAAK,EAAE;oBACd,IAAI,KAAK,YAAY,KAAK,EAAE;wBAC1B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;wBACxB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;qBAC5B;iBACF;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AApCD,gCAoCC","sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n// import path from 'path';\nimport express from 'express';\n\nimport { ENV_TYPE, EXPRESS_PORT } from '../config/config';\n\nconsole.log('Loaded router module');\n\nconst app = express();\n\n/*\ncurl -X GET -H \"Accept: application/json\" http://127.0.0.1:5000\n*/\n/* app.get('/', (req, res) => {\n  console.log('Request');\n  res.sendStatus(200);\n}); */\n\n/** Starts the Express ExpressServer and listens on the configured port. */\n/* export default function startExpressExpressServer(): void {\n  app.listen(EXPRESS_PORT, () => {\n    console.log(`${ENV_TYPE} ExpressServer is listening on port ${EXPRESS_PORT}!`);\n  });\n} */\n\nexport default class ExpressServer {\n  private static server: ExpressServer;\n\n  private express;\n\n  private constructor() {\n    this.express = express();\n  }\n\n  private configure() {\n    this.express.get('/', (req, res) => {\n      console.log('Request');\n      res.sendStatus(200);\n    });\n  }\n\n  static start(): Promise<void> {\n    return new Promise<void>((resolve) => {\n      if (typeof this.server === 'undefined') {\n        this.server = new ExpressServer();\n        this.server.configure();\n\n        try {\n          this.server.express.listen(EXPRESS_PORT, () => {\n            console.log(`${ENV_TYPE} server is listening on port ${EXPRESS_PORT}!`);\n            resolve();\n          });\n        } catch (error) {\n          if (error instanceof Error) {\n            console.log(error.name);\n            console.log(error.message);\n          }\n        }\n      }\n    });\n  }\n}\n"]}