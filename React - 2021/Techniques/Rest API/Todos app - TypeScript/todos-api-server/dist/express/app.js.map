{"version":3,"file":"app.js","sourceRoot":"","sources":["../../src/express/app.ts"],"names":[],"mappings":";;;;;AAEA,gDAAwB;AACxB,sDAA8B;AAC9B,kEAAoC;AAEpC,6CAA0D;AAE1D,+EAAuD;AACvD,2FAAmE;AAEnE,oFAA4D;AAE5D,qEAAqD;AAErD,6DAAqC;AAErC,MAAqB,aAAa;IAKhC;QACE,IAAI,CAAC,OAAO,GAAG,iBAAO,EAAE,CAAC;IAC3B,CAAC;IAEO,SAAS;QAEf,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC;QAGjC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAO,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;QAG/E,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAa,CAAC,CAAC;QAEhC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,yBAAe,CAAC,MAAM,EAAE,CAAC,CAAC;QAGrD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,eAAa,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,mBAAmB,EAAE,IAAI,CAAC,CAAC,CAAC;QAG7F,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,6BAAmB,CAAC,CAAC;IACxC,CAAC;IAEO,MAAM;QACZ,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI;gBACF,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,qBAAY,EAAE,GAAG,EAAE;oBACrC,gBAAM,CAAC,OAAO,CAAC,GAAG,CAAC;wBACjB,KAAK,EAAE,MAAM;wBACb,OAAO,EAAE,GAAG,iBAAQ,gCAAgC,qBAAY,GAAG;qBACpE,CAAC,CAAC;oBACH,OAAO,CAAC,IAAI,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;aACJ;YAAC,OAAO,KAAK,EAAE;gBACd,IAAI,KAAK,YAAY,KAAK,EAAE;oBAC1B,gBAAM,CAAC,OAAO,CAAC,GAAG,CAAC;wBACjB,KAAK,EAAE,OAAO;wBACd,OAAO,EAAE,GAAG,KAAK,CAAC,IAAI,MAAM,KAAK,CAAC,OAAO,EAAE;qBAC5C,CAAC,CAAC;oBACH,MAAM,CAAC,KAAK,CAAC,CAAC;iBACf;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK;QAChB,OAAO,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,EAAE;YACtC,IAAI,OAAO,IAAI,CAAC,MAAM,KAAK,WAAW,EAAE;gBACtC,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC;gBAClC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;gBACxB,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;aAC5E;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA3DD,gCA2DC","sourcesContent":["/* eslint-disable max-len */\n\nimport path from 'path';\nimport express from 'express';\nimport favicon from 'serve-favicon';\n\nimport { ENV_TYPE, EXPRESS_PORT } from '../config/config';\n\nimport requestLogger from './middleware/requestLogger';\nimport defaultErrorHandler from './middleware/defaultErrorHandler';\n\nimport AdminController from './controllers/adminController';\n\nimport responseError from './responseHandlers/error';\n\nimport logger from '../utils/logger';\n\nexport default class ExpressServer {\n  private static server: ExpressServer;\n\n  private express;\n\n  private constructor() {\n    this.express = express();\n  }\n\n  private configure() {\n    // Middleware to parse json from requests\n    this.express.use(express.json());\n\n    // Middleware to handle favicon.ico requests\n    this.express.use(favicon(path.join(__dirname, '../../public', 'favicon.ico')));\n\n    // Middleware for requests logging\n    this.express.use(requestLogger);\n\n    this.express.use('/admin', AdminController.create());\n\n    // Handle 404s\n    this.express.get('*', (req, res) => responseError(req, res, 404, '404 - Bad Request', null));\n\n    // Middleware to handle errors\n    this.express.use(defaultErrorHandler);\n  }\n\n  private listen(): Promise<boolean | Error> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.express.listen(EXPRESS_PORT, () => {\n          logger.express.log({\n            level: 'info',\n            message: `${ENV_TYPE} server is listening on port ${EXPRESS_PORT}!`,\n          });\n          resolve(true);\n        });\n      } catch (error) {\n        if (error instanceof Error) {\n          logger.express.log({\n            level: 'error',\n            message: `${error.name} - ${error.message}`,\n          });\n          reject(error);\n        }\n      }\n    });\n  }\n\n  static async start(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      if (typeof this.server === 'undefined') {\n        this.server = new ExpressServer();\n        this.server.configure();\n        this.server.listen().then(() => resolve(true)).catch(() => resolve(false));\n      }\n    });\n  }\n}\n"]}