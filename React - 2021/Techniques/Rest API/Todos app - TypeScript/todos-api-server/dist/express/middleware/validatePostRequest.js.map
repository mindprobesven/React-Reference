{"version":3,"file":"validatePostRequest.js","sourceRoot":"","sources":["../../../src/express/middleware/validatePostRequest.ts"],"names":[],"mappings":";;;;;AAEA,yDAAqD;AAErD,sEAAsD;AAMtD,MAAM,mBAAmB,GAAG,CAAC,gBAAmC,EAAE,EAAE,CAAC,KAAK,EACxE,GAAoB,EACpB,GAAqB,EACrB,IAA0B,EACX,EAAE;IAEjB,IAAI,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,kBAAkB;WAC/C,GAAG,CAAC,EAAE,CAAC,kBAAkB,CAAC,KAAK,kBAAkB;WACjD,GAAG,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,kBAAkB,EAAE;QAEzD,MAAM,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEhC,MAAM,MAAM,GAAG,oCAAgB,CAAC,GAAG,CAAC,CAAC;QACrC,IAAI,MAAM,CAAC,OAAO,EAAE,EAAE;YACpB,OAAO,IAAI,EAAE,CAAC;SACf;QACD,OAAO,eAAa,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,qCAAqC,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;KAC5F;IACD,OAAO,eAAa,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,sBAAsB,EAAE,IAAI,CAAC,CAAC;AACpE,CAAC,CAAC;AAEF,kBAAe,mBAAmB,CAAC","sourcesContent":["/* eslint-disable max-len */\nimport express from 'express';\nimport { validationResult } from 'express-validator';\n\nimport responseError from '../responseHandlers/error';\n\ninterface IValidationSchema {\n  run: (req: express.Request) => Promise<unknown[]>;\n}\n\nconst validatePostRequest = (validationSchema: IValidationSchema) => async (\n  req: express.Request,\n  res: express.Response,\n  next: express.NextFunction,\n): Promise<void> => {\n  // First checks if the request header contains the fields 'Content-Type' and 'Accept' with an acceptable content type (application/json)\n  if (req.get('Content-Type') === 'application/json'\n  && req.is('application/json') === 'application/json'\n  && req.accepts('application/json') === 'application/json') {\n    // Then run the validation process on 'req' using the provided validation schema\n    await validationSchema.run(req);\n\n    const errors = validationResult(req);\n    if (errors.isEmpty()) {\n      return next();\n    }\n    return responseError(req, res, 400, 'Validation failed for incoming data', errors.array());\n  }\n  return responseError(req, res, 406, '406 - Not acceptable', null);\n};\n\nexport default validatePostRequest;\n"]}