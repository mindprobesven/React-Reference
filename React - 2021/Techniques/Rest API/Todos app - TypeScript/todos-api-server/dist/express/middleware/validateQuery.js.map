{"version":3,"file":"validateQuery.js","sourceRoot":"","sources":["../../../src/express/middleware/validateQuery.ts"],"names":[],"mappings":";;;;;AAIA,yDAAqD;AAErD,sEAAsD;AAMtD,MAAM,aAAa,GAAG,CAAC,gBAAmC,EAAE,EAAE,CAAC,KAAK,EAClE,GAAoB,EACpB,GAAqB,EACrB,IAA0B,EACX,EAAE;IACjB,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;IAEhD,MAAM,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAEhC,MAAM,MAAM,GAAG,oCAAgB,CAAC,GAAG,CAAC,CAAC;IACrC,IAAI,MAAM,CAAC,OAAO,EAAE,EAAE;QACpB,OAAO,IAAI,EAAE,CAAC;KACf;IACD,OAAO,eAAa,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,eAAe,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;AACvE,CAAC,CAAC;AAEF,kBAAe,aAAa,CAAC","sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport express from 'express';\nimport { validationResult } from 'express-validator';\n\nimport responseError from '../responseHandlers/error';\n\ninterface IValidationSchema {\n  run: (req: express.Request) => Promise<unknown[]>;\n}\n\nconst validateQuery = (validationSchema: IValidationSchema) => async (\n  req: express.Request,\n  res: express.Response,\n  next: express.NextFunction,\n): Promise<void> => {\n  console.log('Middleware - validateQueryParams');\n\n  await validationSchema.run(req);\n\n  const errors = validationResult(req);\n  if (errors.isEmpty()) {\n    return next();\n  }\n  return responseError(req, res, 400, 'Invalid query', errors.array());\n};\n\nexport default validateQuery;\n"]}