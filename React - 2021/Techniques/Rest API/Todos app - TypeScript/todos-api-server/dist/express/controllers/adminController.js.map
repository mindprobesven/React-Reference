{"version":3,"file":"adminController.js","sourceRoot":"","sources":["../../../src/express/controllers/adminController.ts"],"names":[],"mappings":"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","sourcesContent":["import express from 'express';\n\nimport checkMongoConnection from '../middleware/checkMongoConnection';\nimport validateGetRequest from '../middleware/validateGetRequest';\nimport validatePostRequest from '../middleware/validatePostRequest';\nimport validateQuery from '../middleware/validateQuery';\n\nimport idValidationSchema from '../validationSchemas/id';\nimport userValidationSchema from '../validationSchemas/user';\nimport userQuerySchema from '../validationSchemas/userQuery';\n\nimport responseSuccess from '../responseHandlers/success';\nimport responseError from '../responseHandlers/error';\n\nimport UserModel from '../../mongo/schemas/user';\n\nclass AdminController {\n  private static controller: AdminController;\n\n  private router: express.Router;\n\n  private constructor() {\n    this.router = express.Router();\n  }\n\n  private configure(): void {\n    /*\n    curl -X GET -H \"Accept: application/json\" http://127.0.0.1:5000/admin/users/?searchFor=sven\n    curl -X GET -H \"Accept: application/json\" http://127.0.0.1:5000/admin/users/?sortOrder=asc\n    curl -X GET -H \"Accept: application/json\" http://127.0.0.1:5000/admin/users/?sortOrder=aSc\n    curl -X GET -H \"Accept: application/json\" http://127.0.0.1:5000/admin/users/?searchFor=first%20Name&searchTerm=s&sortBy=firstName&sortOrder=asc\n    curl -X GET -H \"Accept: application/json\" http://127.0.0.1:5000/admin/users/?searchFor=first-Name&searchTerm=s&sortBy=firstName&sortOrder=asc\n    curl -X GET -H \"Accept: application/json\" http://127.0.0.1:5000/admin/users/?searchFor1=firstName&searchTerm=s&sortBy=firstName&sortOrder=asc\n    curl -X GET -H \"Accept: application/json\" http://127.0.0.1:5000/admin/users/?searchFor=firstNamefirstNamefirstNamefirstNamefirstNamefirstNamefirstNamefirstNamefirstNamefirstNamefirstNamefirstNamefirstNamefirstNamefirstNamefirstNamefirstNamefirstNamefirstNamefirstName&searchTerm=s&sortBy=firstName&sortOrder=asc\n\n    curl -X GET -H \"Accept: application/json\" http://127.0.0.1:5000/admin/users/?searchFor=firstName&searchTerm=s&sortBy=firstName&sortOrder=asc\n    curl -X GET -H \"Accept: application/json\" http://127.0.0.1:5000/admin/users\n    */\n    this.router.get(\n      '/users',\n      [\n        checkMongoConnection,\n        validateGetRequest,\n        validateQuery(userQuerySchema),\n      ],\n      this.getUsers,\n    );\n\n    /*\n    curl -X POST --data '{\"firstName\":\"Sven\", \"lastName\":\"Kohn\", \"email\":\"sven@mindprobe.io\"}' -H \"Accept: application/json\" -H \"Content-Type: application/json\" http://127.0.0.1:5000/admin/user/add\n    curl -X POST --data '{\"firstName\":\"Simon\", \"lastName\":\"Weisberger\", \"email\":\"simon@mindprobe.io\"}' -H \"Accept: application/json\" -H \"Content-Type: application/json\" http://127.0.0.1:5000/admin/user/add\n    curl -X POST --data '{\"firstName\":\"Barbara\", \"lastName\":\"Massari Nola\", \"email\":\"barbara@mindprobe.io\"}' -H \"Accept: application/json\" -H \"Content-Type: application/json\" http://127.0.0.1:5000/admin/user/add\n    curl -X POST --data '{\"firstName\":\"Valentina\", \"lastName\":\"Kohn\", \"email\":\"valentina@mindprobe.io\"}' -H \"Accept: application/json\" -H \"Content-Type: application/json\" http://127.0.0.1:5000/admin/user/add\n    curl -X POST --data '{\"firstName\":\"Thomas\", \"lastName\":\"Kohn\", \"email\":\"thomas@mindprobe.io\"}' -H \"Accept: application/json\" -H \"Content-Type: application/json\" http://127.0.0.1:5000/admin/user/add\n    */\n    this.router.post(\n      '/user/add',\n      [\n        checkMongoConnection,\n        validatePostRequest(userValidationSchema),\n      ],\n      this.addUser,\n    );\n\n    /*\n    curl -X POST --data '{\"id\":\"611a475b0c5aee3a699b1f9a\", \"firstName\":\"Sven Michel\", \"lastName\":\"Kohn\", \"email\":\"sven@mindprobe.io\", \"validated\":true}' -H \"Accept: application/json\" -H \"Content-Type: application/json\" http://127.0.0.1:5000/admin/user/edit'\n    */\n    this.router.post(\n      '/user/edit',\n      [\n        checkMongoConnection,\n        validatePostRequest(idValidationSchema),\n        validatePostRequest(userValidationSchema),\n      ],\n      this.editUser,\n    );\n\n    /*\n    curl -X POST --data '{\"id\":\"611a475b0c5aee3a699b1f9a\"}' -H \"Accept: application/json\" -H \"Content-Type: application/json\" http://127.0.0.1:5000/admin/user/delete\n    */\n    this.router.post(\n      '/user/delete',\n      [\n        checkMongoConnection,\n        validatePostRequest(idValidationSchema),\n      ],\n      this.deleteUser,\n    );\n  }\n\n  private getUsers = async (\n    req: express.Request,\n    res: express.Response,\n  ): Promise<void> => {\n    try {\n      const users = await UserModel.getUsersByQuery({ ...req.query });\n      responseSuccess(req, res, 200, 'Sending user data', users);\n    } catch (error) {\n      if (error instanceof Error) {\n        responseError(req, res, 400, null, error);\n      }\n    }\n  };\n\n  private addUser = async (\n    req: express.Request,\n    res: express.Response,\n  ): Promise<void> => {\n    try {\n      const newUserDoc = new UserModel({ ...req.body });\n\n      const isDuplicate = await newUserDoc.isEmailDuplicate();\n\n      if (isDuplicate) {\n        const validationError = [{\n          value: newUserDoc.email,\n          msg: 'Email exists',\n          param: 'email',\n          location: 'body',\n        }];\n        responseError(req, res, 400, 'Email exists', validationError);\n        return;\n      }\n\n      await newUserDoc.save();\n\n      responseSuccess(req, res, 200, 'New user created');\n    } catch (error) {\n      if (error instanceof Error) {\n        responseError(req, res, 400, null, error);\n      }\n    }\n  };\n\n  private editUser = async (\n    req: express.Request,\n    res: express.Response,\n  ): Promise<void> => {\n    try {\n      const userId = String((req.body as Record<string, unknown>).id);\n      const docToEdit = await UserModel.getUserById(userId);\n\n      if (!docToEdit) {\n        responseError(req, res, 400, 'User not found', null);\n        return;\n      }\n\n      const currentEmail = docToEdit.email;\n\n      docToEdit.set({ ...req.body });\n\n      const newEmail = docToEdit.email;\n\n      if (newEmail !== currentEmail) {\n        const isDuplicate = await docToEdit.isEmailDuplicate();\n\n        if (isDuplicate) {\n          const validationError = [{\n            value: newEmail,\n            msg: 'Email exists',\n            param: 'email',\n            location: 'body',\n          }];\n          responseError(req, res, 400, 'Email exists', validationError);\n          return;\n        }\n      }\n\n      await docToEdit.save();\n\n      responseSuccess(req, res, 200, 'User updated');\n    } catch (error) {\n      if (error instanceof Error) {\n        responseError(req, res, 400, null, error);\n      }\n    }\n  };\n\n  private deleteUser = async (\n    req: express.Request,\n    res: express.Response,\n  ): Promise<void> => {\n    try {\n      const userId = String((req.body as Record<string, unknown>).id);\n      const isDeleted = await UserModel.deleteUserById(userId);\n\n      if (!isDeleted) {\n        responseError(req, res, 400, 'User deletion failed', null);\n        return;\n      }\n      responseSuccess(req, res, 200, 'User deleted successfully');\n    } catch (error) {\n      if (error instanceof Error) {\n        responseError(req, res, 400, null, error);\n      }\n    }\n  };\n\n  static create(): express.Router {\n    if (typeof this.controller === 'undefined') {\n      this.controller = new AdminController();\n      this.controller.configure();\n    }\n    return this.controller.router;\n  }\n}\n\nexport default AdminController;\n"]}