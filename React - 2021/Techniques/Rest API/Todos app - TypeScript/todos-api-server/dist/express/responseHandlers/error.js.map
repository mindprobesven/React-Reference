{"version":3,"file":"error.js","sourceRoot":"","sources":["../../../src/express/responseHandlers/error.ts"],"names":[],"mappings":";;;;;AAIA,gEAAwC;AAcxC,MAAM,aAAa,GAAG,CAAC,EACrB,GAAG,EACH,GAAG,EACH,MAAM,GAAG,GAAG,EACZ,OAAO,EACP,OAAO,EACP,KAAK,GACS,EAAoB,EAAE;IACpC,IAAI,OAAO,EAAE;QACX,gBAAM,CAAC,OAAO,CAAC,GAAG,CAAC;YACjB,KAAK,EAAE,OAAO;YACd,OAAO,EAAE,KAAK,GAAG,CAAC,MAAM,MAAM,MAAM,MAAM,OAAO,MAAM,GAAG,CAAC,WAAW,MAAM,GAAG,CAAC,EAAE,MAAM,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,EAAE;SACxH,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACzC;IAED,OAAO,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AA8BhC,CAAC,CAAC;AAEF,kBAAe,aAAa,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable max-len */\n\nimport express from 'express';\nimport logger from '../../utils/logger';\n\ntype ResponseError = {\n  req: express.Request;\n  res: express.Response;\n  status: number;\n  message?: string;\n  payload?: Array<Record<string, unknown>>;\n  error?: Error;\n};\n\n/**\n * Sends and logs a HTTP `error` response\n */\nconst responseError = ({\n  req,\n  res,\n  status = 400,\n  message,\n  payload,\n  error,\n}: ResponseError): express.Response => {\n  if (message) {\n    logger.express.log({\n      level: 'error',\n      message: `[ ${req.method} ] ${status} - ${message} - ${req.originalUrl} - ${req.ip} - ${String(req.get('user-agent'))}`,\n    });\n\n    return res.status(status).send(message);\n  }\n\n  return res.sendStatus(status);\n\n  /* if (error) {\n    logger.express.log({\n      level: 'error',\n      message: `[ ${req.method} ] ${status} - ${error.name} - ${error.message} - ${req.originalUrl} - ${req.ip} - ${req.get('user-agent')}`,\n    });\n\n    return res.status(status).send(`${error.name} - ${error.message}`);\n  }\n\n  if (message && payload) {\n    logger.express.log({\n      level: 'error',\n      message: `[ ${req.method} ] ${status} - ${message} - ${req.originalUrl} - ${req.ip} - ${req.get('user-agent')}`,\n    });\n\n    return res.status(status).json({ error: payload });\n  }\n\n  if (message) {\n    logger.express.log({\n      level: 'error',\n      message: `[ ${req.method} ] ${status} - ${message} - ${req.originalUrl} - ${req.ip} - ${req.get('user-agent')}`,\n    });\n\n    return res.status(status).send(message);\n  }\n\n  return res.sendStatus(status); */\n};\n\nexport default responseError;\n"]}