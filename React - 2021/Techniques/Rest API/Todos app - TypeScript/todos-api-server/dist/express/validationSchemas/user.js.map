{"version":3,"file":"user.js","sourceRoot":"","sources":["../../../src/express/validationSchemas/user.ts"],"names":[],"mappings":";;;;;AAAA,0DAAkC;AAClC,yDAAgD;AAEhD,MAAM,oBAAoB,GAAG,+BAAW,CAAC;IACvC,KAAK,EAAE;QACL,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE;YACR,YAAY,EAAE,6BAA6B;YAC3C,IAAI,EAAE,IAAI;SACX;QACD,QAAQ,EAAE;YACR,OAAO,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE;YACpB,YAAY,EAAE,2BAA2B;YACzC,IAAI,EAAE,IAAI;SACX;QACD,OAAO,EAAE;YACP,YAAY,EAAE,uBAAuB;SACtC;QACD,cAAc,EAAE,IAAI;KACrB;IACD,SAAS,EAAE;QACT,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE;YACR,YAAY,EAAE,eAAe;YAC7B,IAAI,EAAE,IAAI;SACX;QACD,QAAQ,EAAE;YACR,OAAO,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE;YACpB,YAAY,EAAE,UAAU;YACxB,IAAI,EAAE,IAAI;SACX;QAED,MAAM,EAAE;YACN,OAAO,EAAE,CAAC,KAAa,EAAE,EAAE;gBACzB,IAAI,mBAAS,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;uBAC3D,mBAAS,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;uBAC1D,mBAAS,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE;oBAC7D,OAAO,IAAI,CAAC;iBACb;gBACD,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;YACxC,CAAC;SACF;KACF;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE;YACR,YAAY,EAAE,eAAe;YAC7B,IAAI,EAAE,IAAI;SACX;QACD,QAAQ,EAAE;YACR,OAAO,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE;YACpB,YAAY,EAAE,UAAU;YACxB,IAAI,EAAE,IAAI;SACX;QACD,MAAM,EAAE;YACN,OAAO,EAAE,CAAC,KAAa,EAAE,EAAE;gBACzB,IAAI,mBAAS,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;uBAC3D,mBAAS,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;uBAC1D,mBAAS,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE;oBAC7D,OAAO,IAAI,CAAC;iBACb;gBACD,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;YACxC,CAAC;SACF;KACF;IACD,SAAS,EAAE;QACT,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE;YACN,OAAO,EAAE,CAAC,KAAc,EAAE,EAAE;gBAC1B,IAAI,mBAAS,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE;oBACzC,OAAO,IAAI,CAAC;iBACb;gBACD,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACvC,CAAC;SACF;KACF;CACF,CAAC,CAAC;AAEH,kBAAe,oBAAoB,CAAC","sourcesContent":["import validator from 'validator';\nimport { checkSchema } from 'express-validator';\n\nconst userValidationSchema = checkSchema({\n  email: {\n    trim: true,\n    notEmpty: {\n      errorMessage: 'Email address not specified',\n      bail: true,\n    },\n    isLength: {\n      options: { max: 50 },\n      errorMessage: 'Email address is too long',\n      bail: true,\n    },\n    isEmail: {\n      errorMessage: 'Invalid email address',\n    },\n    normalizeEmail: true,\n  },\n  firstName: {\n    trim: true,\n    notEmpty: {\n      errorMessage: 'Not specified',\n      bail: true,\n    },\n    isLength: {\n      options: { max: 50 },\n      errorMessage: 'Too long',\n      bail: true,\n    },\n    // Custom isAlpha validator to allow special characters (e.g. ñ,ü) for multiple locales\n    custom: {\n      options: (value: string) => {\n        if (validator.isAlphanumeric(value, 'en-US', { ignore: ' -' })\n        || validator.isAlphanumeric(value, 'es-ES', { ignore: ' -' })\n        || validator.isAlphanumeric(value, 'de-DE', { ignore: ' -' })) {\n          return true;\n        }\n        throw new Error('Invalid characters');\n      },\n    },\n  },\n  lastName: {\n    trim: true,\n    notEmpty: {\n      errorMessage: 'Not specified',\n      bail: true,\n    },\n    isLength: {\n      options: { max: 50 },\n      errorMessage: 'Too long',\n      bail: true,\n    },\n    custom: {\n      options: (value: string) => {\n        if (validator.isAlphanumeric(value, 'en-US', { ignore: ' -' })\n        || validator.isAlphanumeric(value, 'es-ES', { ignore: ' -' })\n        || validator.isAlphanumeric(value, 'de-DE', { ignore: ' -' })) {\n          return true;\n        }\n        throw new Error('Invalid characters');\n      },\n    },\n  },\n  validated: {\n    optional: true,\n    custom: {\n      options: (value: boolean) => {\n        if (validator.isBoolean(value.toString())) {\n          return true;\n        }\n        throw new Error('Must be a boolean');\n      },\n    },\n  },\n});\n\nexport default userValidationSchema;\n"]}