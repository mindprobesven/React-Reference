{"version":3,"file":"connection.js","sourceRoot":"","sources":["../../src/mongo/connection.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable indent */\n/* eslint-disable max-len */\nimport process from 'process';\nimport mongoose from 'mongoose';\n\nimport { MONGO_URI, MONGO_OPTIONS } from '../config/config';\n\nimport logger from '../utils/logger';\n\nenum Status {\n  OK = 'OK',\n  Fail = 'Fail',\n  Duplicate = 'Duplicate',\n}\nclass Mongo {\n  private static mongo: Mongo;\n\n  private isConnected: boolean;\n\n  private constructor() {\n    this.isConnected = false;\n  }\n\n  private initEventListeners = (): void => {\n    const db = mongoose.connection;\n\n    /** Catch database `readyState` change events and handle them. */\n    const handleReadyStateStatusChange = () => {\n      switch (db.readyState) {\n        case 0:\n          this.isConnected = false;\n\n          logger.mongo.log({\n            level: 'info',\n            message: 'Disconnected!',\n          });\n          break;\n        case 1:\n          this.isConnected = true;\n\n          logger.mongo.log({\n            level: 'info',\n            message: 'Connected!',\n          });\n          break;\n        case 2:\n          logger.mongo.log({\n            level: 'info',\n            message: 'Connecting...',\n          });\n          break;\n        case 3:\n          logger.mongo.log({\n            level: 'info',\n            message: 'Disconnecting...',\n          });\n          break;\n        case 4:\n          logger.mongo.log({\n            level: 'error',\n            message: 'Invalid credentials!',\n          });\n          break;\n        default:\n          logger.mongo.log({\n            level: 'error',\n            message: 'Unknown readyState!',\n          });\n      }\n    };\n\n    /** Catch database `connection` change events and handle them. */\n    const handleConnectionStatusChange = (event: string) => {\n      switch (event) {\n        case 'reconnected':\n          logger.mongo.log({\n            level: 'info',\n            message: 'Reconnected to database successfully!',\n          });\n          break;\n        case 'reconnectFailed':\n          logger.mongo.log({\n            level: 'error',\n            message: 'Reconnect failed!',\n          });\n          break;\n        case 'error':\n          logger.mongo.log({\n            level: 'error',\n            message: 'A connection error ocurred!',\n          });\n          break;\n        default:\n          logger.mongo.log({\n            level: 'error',\n            message: 'Unknown error event!',\n          });\n      }\n    };\n\n    db.on('connecting', handleReadyStateStatusChange)\n      .on('connected', handleReadyStateStatusChange)\n      .on('disconnecting', handleReadyStateStatusChange)\n      .on('disconnected', handleReadyStateStatusChange)\n      .on('invalid credentials', handleReadyStateStatusChange);\n\n    db.on('reconnected', () => handleConnectionStatusChange('reconnected'))\n      .on('reconnectFailed', () => handleConnectionStatusChange('reconnectFailed'))\n      .on('error', () => handleConnectionStatusChange('error'));\n\n    /** Catch `process` events if the app is restarted or exited and gracefully close the database connection */\n    const gracefulExit = () => {\n      db.close()\n        .then(() => {\n          logger.mongo.log({\n            level: 'info',\n            message: 'Graceful exit initiated. Connection to MongoDB closed.',\n          });\n          process.exit(0);\n        })\n        .catch((error: Error) => { throw error; });\n    };\n\n    process.on('SIGINT', gracefulExit)\n      .on('SIGTERM', gracefulExit)\n      .on('SIGUSR2', gracefulExit);\n  };\n\n  private connectToDatabase = (): Promise<boolean | Error> => (\n    new Promise((resolve, reject) => {\n      mongoose.connect(MONGO_URI, MONGO_OPTIONS)\n        .then(() => resolve(true))\n        .catch((error) => {\n          if (error instanceof Error) {\n            logger.mongo.log({\n              level: 'error',\n              message: `${error.name} ${error.message}`,\n            });\n            reject(error);\n          }\n        });\n    })\n  );\n\n  static get isConnected(): boolean {\n    if (this.mongo instanceof Mongo) {\n      return this.mongo.isConnected;\n    }\n    return false;\n  }\n\n  static connect(): Promise<Status> {\n    return new Promise((resolve) => {\n      if (typeof this.mongo === 'undefined') {\n        this.mongo = new Mongo();\n        this.mongo.initEventListeners();\n        this.mongo.connectToDatabase().then(() => resolve(Status.OK)).catch(() => resolve(Status.Fail));\n      } else {\n        resolve(Status.Duplicate);\n      }\n    });\n  }\n}\n\nexport default Mongo;\n"]}