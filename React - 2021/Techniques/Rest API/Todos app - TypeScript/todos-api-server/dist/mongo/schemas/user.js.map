{"version":3,"file":"user.js","sourceRoot":"","sources":["../../../src/mongo/schemas/user.ts"],"names":[],"mappings":";;AAEA,uCAEkB;AAkBlB,MAAM,UAAU,GAAG,IAAI,iBAAM,CAA2B;IACtD,SAAS,EAAE;QACT,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;KACf;IACD,KAAK,EAAE;QACL,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,IAAI;KACb;IACD,SAAS,EAAE;QACT,IAAI,EAAE,OAAO;QACb,QAAQ,EAAE,IAAI;QACd,OAAO,EAAE,KAAK;KACf;CACF,EAAE;IACD,UAAU,EAAE,IAAI;CACjB,CAAC,CAAC;AAEH,UAAU,CAAC,OAAO,CAAC,SAAS,GAAG,SAAS,SAAS;IAC/C,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;AAC5C,CAAC,CAAC;AASF,UAAU,CAAC,OAAO,CAAC,eAAe,GAAG,SAAS,eAAe,CAAC,EAC5D,SAAS,EACT,UAAU,EACV,MAAM,EACN,SAAS,GACF;IACP,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACvB,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACpB,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAEvB,MAAM,QAAQ,GAA+B,EAAE,CAAC;IAChD,MAAM,OAAO,GAA+B,EAAE,CAAC;IAE/C,IAAI,SAAS,IAAI,UAAU,EAAE;QAC3B,QAAQ,CAAC,SAAS,CAAC,GAAG,IAAI,MAAM,CAAC,IAAI,UAAU,EAAE,EAAE,GAAG,CAAC,CAAC;KACzD;IAED,IAAI,MAAM,IAAI,SAAS,EAAE;QACvB,OAAO,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC;KAC7B;IAED,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACtB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAErB,OAAO,IAAI;SACR,IAAI,CACH,QAAQ,EACR,EAAE,SAAS,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EACxB;QACE,IAAI,EAAE,OAAO;QACb,IAAI,EAAE,IAAI;KACX,CACF,CAAC;AASN,CAAC,CAAC;AAEF,MAAM,SAAS,GAAG,gBAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AAE5C,kBAAe,SAAS,CAAC","sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Schema, model, Model, ObjectId, Types,\n} from 'mongoose';\n\n// Schema interface\n// Typings for schema properties and instance methods.\nexport interface IUser {\n  firstName: string;\n  lastName: string;\n  email: string;\n  validated: boolean;\n  getUsers1: () => Promise<void>;\n}\n\n// Model interface\n// Typings for model static methods.\ninterface IUserModel extends Model<IUser> {\n  getUsersByQuery: (query: Record<string, unknown>) => Promise<IUser[]>;\n}\n\nconst userSchema = new Schema<IUser, IUserModel, IUser>({\n  firstName: {\n    type: String,\n    required: true,\n  },\n  lastName: {\n    type: String,\n    required: true,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  validated: {\n    type: Boolean,\n    required: true,\n    default: false,\n  },\n}, {\n  timestamps: true,\n});\n\nuserSchema.methods.getUsers1 = function getUsers1() {\n  console.log('getUsers - Instance Method');\n};\n\ninterface IQuery {\n  searchFor?: string;\n  searchTerm?: string;\n  sortBy?: string;\n  sortOrder?: string;\n}\n\nuserSchema.statics.getUsersByQuery = function getUsersByQuery({\n  searchFor,\n  searchTerm,\n  sortBy,\n  sortOrder,\n}: IQuery) {\n  console.log(searchFor);\n  console.log(searchTerm);\n  console.log(sortBy);\n  console.log(sortOrder);\n\n  const queryObj: { [key: string]: unknown } = {};\n  const sortObj: { [key: string]: unknown } = {};\n\n  if (searchFor && searchTerm) {\n    queryObj[searchFor] = new RegExp(`^${searchTerm}`, 'i');\n  }\n\n  if (sortBy && sortOrder) {\n    sortObj[sortBy] = sortOrder;\n  }\n\n  console.log(queryObj);\n  console.log(sortObj);\n\n  return this\n    .find(\n      queryObj,\n      { updatedAt: 0, __v: 0 },\n      {\n        sort: sortObj,\n        lean: true,\n      },\n    );\n\n  /* .find(filterObj)\n    .sort({ [sortBy]: sortOrder })\n    .select({\n      updatedAt: 0,\n      __v: 0,\n    })\n    .lean(); */\n};\n\nconst UserModel = model('User', userSchema);\n\nexport default UserModel;\n"]}